<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0069)http://www.stat.washington.edu/lstan/Courses/stat502_2007/lab101607.R -->
<HTML><HEAD>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="MSHTML 6.00.2900.3243" name=GENERATOR></HEAD>
<BODY><PRE>#########################################################################
#				READ IN DATA FILE						#	
#########################################################################

gpas&lt;-read.table("gpas.dat",header=F,sep="\t")
#gpas&lt;-read.table(file.choose(),header=F,sep="\t")
dimnames(gpas)[[2]]&lt;-c("GPA", "Group")		#assign column names: 1 - GPA, 2 - Group

#########################################################################
#		t-test									#	
#########################################################################

#########################
#	H0: mu1==3.0	#
#########################

# The form of the t-statistic for one-sample t-test:
# t.stat= (mean(x)-mu)/(sd(x)/sqrt(length(x)))

gpa1 &lt;- gpas$GPA[gpas$Group==1]

t.stat &lt;- (mean(gpa1)-3.0)/(sd(gpa1)/sqrt(length(gpa1)))
p.val&lt;-2*(1-pt(abs(t.stat), length(gpa1)-1))

t.stat; p.val;


# t.test(x, y = NULL,
#            alternative = c("two.sided", "less", "greater"),
#            mu = 0, paired = FALSE, var.equal = FALSE,
#            conf.level = 0.95, ...)

t.test(gpa1, alternative="two.sided", mu=3.0, conf.level = 0.95)

t.test(gpa1, alternative="less", mu=3.0, conf.level = 0.95)
p.val&lt;-pt(t.stat, length(gpa1)-1)
p.val

#####################################
#	H0: mu1=mu2 iff mu1-mu2==0	#
#####################################

# The form of the t-statistic for two-sample t-test, VAR are EQUAL:
# t.stat= (mean(x)-mean(y)- (mu1-mu2))/s1
# s1 = sp*sqrt(1/length(x) + 1/length(y))
# sp = sqrt(((length(x)-1)*var(x)+(length(y)-1)*var(y))/(nx+ny-2))
# df = length(x)+length(y)-2

t.test(GPA ~ Group, data = gpas, var.equal = TRUE, conf.level = 0.95)


# Modified Welsh two-sample t-test , VAR are NOT EQUAL (CB, p.409, ex. 8.42):
# t.stat= (mean(x)-mean(y)- (mu1-mu2))/s2
# s2 = sqrt(var(x)/length(x) + var(y)/length(y))
# df = (var(x)/length(x)+var(y)/length(y))^2/((var(x)^2/(length(x)^2*(length(x)-1))+
#		+var(y)^2/(length(y)^2*(y-1)))

gpa2 &lt;- gpas$GPA[gpas$Group==2]
df&lt;-29*(var(gpa1)+var(gpa2))^2/(var(gpa1)^2+var(gpa2)^2)
df

t.test(GPA ~ Group, data = gpas, conf.level = 0.95)

###########################################
#		CONFIDENCE INTERVALS		#
###########################################

# The CI for the parameter = parameter estimate +/- margin of error
# The CI of the mean: 
#		estimate = sample mean
#		margin of error = SE * t(alpha/2, df)


# 95% CI for the mean GPA of Group 1:

m.e &lt;- qt(.975, df=length(gpa1)-1) * sd(gpa1)/sqrt(length(gpa1))
low&lt;-mean(gpa1)- m.e
upper&lt;-mean(gpa1)+ m.e
CI &lt;- c(low, upper)
CI

t.test(gpa1, alternative="two.sided", mu=3.0, conf.level = 0.95)


###########################################
#	CI: Coverage probabilities 		#
###########################################

# Generate a sample of 30 observations from a Normal(15, 2)
# Create a 95% CI
# See if CI includes the true mean

n&lt;-30
mu&lt;-15
coverage&lt;-0
x.sim &lt;- rnorm(n, mean=mu, sd=2)
m.e &lt;- qt(.975, df=n-1)*sd(x.sim)/sqrt(n)

low &lt;- mean(x.sim) - m.e
upper&lt;-mean(x.sim)+m.e

low
mean(x.sim)
upper

coverage&lt;-ifelse(((mu &gt;= low) &amp;&amp; (mu &lt;= upper)), 1, 0)
coverage


coverage&lt;-0
for(i in 1:5000){
	x.sim &lt;- rnorm(n, mean= mu, sd=2)
	m.e &lt;- qt(.975, df=n-1)*sd(x.sim)/sqrt(n)
	low &lt;- mean(x.sim) - m.e
	upper&lt;-mean(x.sim)+m.e
	coverage&lt;-coverage + ifelse(((mu &gt;= low) &amp;&amp; (mu &lt;= upper)), 1, 0)
}
coverage&lt;-coverage/5000
coverage


###############################
#	POWER CALCULATIONS 	#
###############################

#power = Pr(reject H_0| H_0 is false)

#testing H0: mu[A]-mu[B] = 0 vs. H1: mu[A]-mu[B] = delta (e.g. 5)

alpha &lt;- .05		#type I error
nA &lt;- 20			#size of sample A
nB &lt;- 20			#size of sample B
sigma &lt;- 1			#variance, assumed the same in both samples
delta &lt;- 1			#effect size

t.rcrit &lt;- qt( 1-alpha/2 , nA + nB -2 )
t.gamma &lt;- delta/( sigma*sqrt(1/nA + 1/nB ))
t.power &lt;- pt(-t.rcrit, nA+nB-2 , ncp=t.gamma ) +
1- pt(t.rcrit, nA+nB-2 , ncp=t.gamma )
t.power


#################################################
#	POWER AS A FUNCTION OF THE SIZE EFFECT	#
#################################################
par(mfrow=c(2,2), font.main = 2)
delta &lt;- seq(-2,2,by=.05)
t.power &lt;- NULL
for(i in 1:length(delta))
{
  t.rcrit &lt;- qt( 1-alpha/2 , nA + nB -2 )
  t.gamma &lt;- delta[i]/( sigma*sqrt(1/nA + 1/nB ))
  t.power[i] &lt;- pt(-t.rcrit, nA+nB-2 , ncp=t.gamma ) + 1- pt(t.rcrit, nA+nB-2 , ncp=t.gamma )
  
}

plot(delta, t.power, type="l", lwd = 2, 
	main = expression(paste("Power as a function of ", delta)), xlab = expression(paste("Effect size, ", delta)), ylab = "Power")

# now using the normal approximation 

t.norm.power &lt;- NULL
for(i in 1:length(delta))
{
  t.rcrit  &lt;-  qt( 1-alpha/2 , nA + nB -2 )
  t.gamma  &lt;-  delta[i]/( sigma*sqrt(1/nA + 1/nB ))
  t.norm.power[i] &lt;- pnorm(-t.rcrit, mean=t.gamma ) + 1- pnorm(t.rcrit, mean=t.gamma )
}

# use the lines() function to draw our new plot on top of the existing plot
lines(delta, t.norm.power, lwd = 2, col=2)



#################################################
#	POWER AS A FUNCTION OF THE SAMPLE SIZE	#
#################################################

nA  &lt;-  5
nB  &lt;-  5
delta &lt;- seq(-2,2,by=.05)

t.power &lt;- NULL
for(i in 1:length(delta)){
	t.rcrit  &lt;-  qt( 1-alpha/2 , nA + nB -2 )
	t.gamma  &lt;-  delta[i]/( sigma*sqrt(1/nA + 1/nB ))
	t.power[i]  &lt;-  pt(-t.rcrit, nA+nB-2 , ncp=t.gamma ) + 1- pt(t.rcrit, nA+nB-2 , ncp=t.gamma )
}

plot(delta, t.power, type="l", lwd = 2, 
	main = "Power curves for n=5", xlab = expression(paste("Effect size, ", delta)), ylab = "Power")

# NOW USING THE NORMAL APPROXIMATION

t.norm.power &lt;- NULL
for(i in 1:length(delta))
{
  t.rcrit  &lt;-  qt( 1-alpha/2 , nA + nB -2 )
  t.gamma  &lt;-  delta[i]/( sigma*sqrt(1/nA + 1/nB ))
  t.norm.power[i]  &lt;-  pnorm(-t.rcrit, mean=t.gamma ) + 1- pnorm(t.rcrit, mean=t.gamma )
}
lines(delta, t.norm.power, lwd = 2, col=2)


# Power as a function of sample size:
sample.size&lt;-seq(2,20, by = 1)
delta &lt;- 1

t.size.power &lt;- NULL
for(i in 1:length(sample.size)){
	nA&lt;-nB&lt;-sample.size[i]
	t.rcrit  &lt;-  qt( 1-alpha/2 , nA + nB -2 )
	t.gamma  &lt;-  delta/( sigma*sqrt(1/nA + 1/nB ))
	t.size.power[i]  &lt;-  pt(-t.rcrit, nA+nB-2 , ncp=t.gamma ) + 1- pt(t.rcrit, nA+nB-2 , ncp=t.gamma )
}

plot(sample.size, t.size.power, type="l", lwd = 2, 
	main =expression(paste("Power curves for ", delta, "=1")), xlab = expression(paste("Sample size: ", n[A]==n[B])), ylab = "Power")


t.norm.power &lt;- NULL
for(i in 1:length(sample.size)){
	nA&lt;-nB&lt;-sample.size[i]
	t.rcrit  &lt;-  qt( 1-alpha/2 , nA + nB -2 )
	t.gamma  &lt;-  delta/( sigma*sqrt(1/nA + 1/nB ))
	t.norm.power[i]  &lt;-  pnorm(-t.rcrit, mean=t.gamma ) + 1- pnorm(t.rcrit, mean=t.gamma )
}
lines(sample.size, t.norm.power, lwd = 2, col=2)


###########################################
#	POWER AS A FUNCTION OF VARIANCE	#
###########################################

delta &lt;- 1
sigma  &lt;-  seq(.1, 2, by = .05)
nA&lt;-nB&lt;-5
t.power &lt;- NULL
for(i in 1:length(sigma)){
  t.rcrit  &lt;-  qt( 1-alpha/2 , nA + nB -2 )
  t.gamma  &lt;-  delta/( sigma[i]*sqrt(1/nA + 1/nB ))
  t.power[i]  &lt;-  pt(-t.rcrit, nA+nB-2 , ncp=t.gamma ) + 1- pt(t.rcrit, nA+nB-2 , ncp=t.gamma )
}
plot(sigma, t.power, type="l", lwd = 2, 
	main = expression(paste("Power as a functtion of ", sigma)), xlab = expression(paste("St.Deviation, ", sigma)), ylab = "Power")


t.norm.power &lt;- NULL
for(i in 1:length(sigma)){
	t.rcrit  &lt;-  qt( 1-alpha/2 , nA + nB -2 )
	t.gamma  &lt;-  delta/( sigma[i]*sqrt(1/nA + 1/nB ))
	t.norm.power[i]  &lt;-  pnorm(-t.rcrit, mean=t.gamma ) + 1- pnorm(t.rcrit, mean=t.gamma )
}
lines(sigma, t.norm.power, lwd = 2, col=2)









</PRE></BODY></HTML>
